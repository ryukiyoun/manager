plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

jacoco {
	toolVersion = '0.8.6'
}

bootJar{
	archivesBaseName = 'springboot-temple-manager'
	archiveFileName = 'springboot-temple-manager.jar'
	archiveVersion = "0.0.1"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//Spring Security 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.0.1.RELEASE'

	//Thymeleaf 의존성
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'com.github.zhanhb:thymeleaf-layout-dialect:3.0.0'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

	//DevTools 의존성
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	//Lombok 의존성
	implementation 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'

	//Jasypt 의존성
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:1.17'

	//MariaDB Connection 의존성
	implementation 'mysql:mysql-connector-java'

	//H2 DB
	implementation 'com.h2database:h2:2.0.202'

	//Jpa 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//Map Struct 의존성 추가
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	//QueryDsl 의존성 추가
	implementation("com.querydsl:querydsl-core")
	implementation("com.querydsl:querydsl-jpa")
	annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa") // querydsl JPAAnnotationProcessor 사용 지정
	annotationProcessor("jakarta.persistence:jakarta.persistence-api") // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
	annotationProcessor("jakarta.annotation:jakarta.annotation-api") // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

// querydsl 설정
def generated='src/main/generated'
sourceSets {
	main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
	file(generated).delete()
	options.annotationProcessorGeneratedSourcesDirectory(file(generated))
}

tasks.named('test') {
	systemProperty "jasypt.encryptor.password", System.getProperty("jasypt.encryptor.password")
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

//jacoco 설정
jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
	}

	def Q_domains = []
	for(qPattern in "**/QA".."**/QZ"){
		Q_domains.add(qPattern + "*")
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ["**/dto/UserDTO.class"] + Q_domains)
		}))
	}

	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification{
	def Q_domains = []
	for (qPattern in "*.QA".."*.QZ") {
		Q_domains.add(qPattern + "*")
	}
	violationRules{
		rule{
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			excludes = ["*.dto.UserDTO.class"] + Q_domains
		}
	}
}
